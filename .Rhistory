purchasers <- data.frame(
name=c('Kent Electronics', 'Silver Soluations', 'Davis Systems'),
city=c('Boston', 'New York City', 'Denver'),
lat=c(42.3601, 40.7127, 39.7392),
lng=c(-71.0589, -74.0059, -104.9903)
)
# Duplicate length to match length of products
purchasers <- do.call("rbind", replicate(purchasers, each=6, simplify = TRUE))
purchasers
replicate(purchasers, each=6, simplify = TRUE)
# Purchasers
purchasers <- data.frame(
name=rep(c('Kent Electronics', 'Silver Soluations', 'Davis Systems'), each=6),
city=rep(c('Boston', 'New York City', 'Denver'), each=6),
lat=rep(c(42.3601, 40.7127, 39.7392), each=6),
lng=rep(c((-71.0589, -74.0059, -104.9903), each=6)
)
purchasers <- data.frame(
name=rep(c('Kent Electronics', 'Silver Soluations', 'Davis Systems'), each=6),
city=rep(c('Boston', 'New York City', 'Denver'), each=6),
lat=rep(c(42.3601, 40.7127, 39.7392), each=6),
lng=rep(c(-71.0589, -74.0059, -104.9903), each=6)
)
purchasers
rnorm(1, base_price, 2)
base_price <- c(100, 200, 125, 150, 400, 500)
rnorm(1, base_price, 2)
rnorm(10, base_price, 2)
rnorm(length(base_price), base_price, 2)
purchasers
purchasers[19,]
mydf <- data.frame(col1=c(1, 2, 3, 4),
col2 = c(5, 6, 7, 8),
col3 = c("a", "b", "c", "d"), stringsAsFactors  = FALSE)
mydf
index <- rep(seq_len(nrow(mydf)), each = 3)
index
mydf[index, ]
4 * 6 * 3
items <- c('7600 Series Routers',
'7200 Series Routers',
'Lumin Optical Transmission Platform',
'Line Equalizers',
'Blade Switches for Dell',
'Catalyst 4500 Series Switches')
items <- rep(items, each=12)
# Item categories
categories <- rep(c('router', 'video', 'switch'),each= 24)
# Prices
base_price <- c(100, 200, 125, 150, 400, 500)
prices <- rnorm(72, base_price, 15)
quarters <- rep(c('q1', 'q2', 'q3', 'q4'), each=18)
quarters
index <- rep(seq_len(nrow(purchasers)), 12)
index <- rep(seq_len(nrow(purchasers)), 12)
purchasers[index, ]
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
p <- plot_ly(midwest, x = percollege, color = state, type = "box")
p
rm(list=ls())
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
version(plotly)
version
packageVersion(plotly)
packageVersion('plotly')
packageVersion('ggplot')
packageVersion('ggplot2')
rm(list=ls())
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
install.packages("devtools")
library(devtools)
install_github("plotly", "ropensci")
rm(list=ls())
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
library(plotly)
install.packages('plotly')
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
library(plotly)
install.packages('plotly')
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
data <- c(3,5,2,1,6)
total <- sum(data)
total
print(total)
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read data into a variable called "gates_data" using the "read.csv" function
gates_data <- read.csv('data/gates_money.csv')
class(gates_data)
names(gates_data)
gates_data$total_amount
class(gates_data$total_amount)
mode(gates_data$total_amount)
typeof(gates_data$total_amount)
is.vector(gates_data$total_amount)
levels(spending)
spending
gates_data$start_year
gates_data
View(gates_data)
View(gates_data)
duplicated(gates_data$organization)
unique(gates_data$organization)
#### Section 1 ####
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read data into a variable called "gates_data" using the "read.csv" function
gates_data <- read.csv('data/gates_money.csv')
# Use the View function to look at your data
View(gates_data)
# Create a variable "spending" as the "total_amount" column of the dataset
spending <- gates_data$total_amount
# Confirm that your "spending" variable is a vector using the "is.vector" function
is.vector(spending)
# Create a variable "title" as the "grant_title" column of the dataset
title <- gates_data$grant_title
### Now you can ask some more interesting questions about the dataset ###
# Create a variable "mean_spending" that is the mean of your spending variable
mean_spending <- mean(spending)
# Create a variable "highest_amount" that is the maximum grant size
highest_amount <- max(spending)
# Create a variable "lowest_amount" that is the minimum grant size
lowest_amount <- min(spending)
title[spending == highest_amount]
title
is.vector(title)
is.factor(title)
as.vector(title)
title[spending == lowest_amount]
title <- as.vector(gates_data$grant_title)
title[spending == lowest_amount]
#### Section 1 ####
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read data into a variable called "gates_data" using the "read.csv" function
gates_data <- read.csv('data/gates_money.csv')
# Use the View function to look at your data
View(gates_data)
# Create a variable "spending" as the "total_amount" column of the dataset
spending <- gates_data$total_amount
# Confirm that your "spending" variable is a vector using the "is.vector" function
is.vector(spending)
# Create a variable "org" as the "organization" column of the dataset
org <- as.vector(gates_data$organization)
### Now you can ask some more interesting questions about the dataset.  Store your answers in variables ###
# What was the mean grant value?
mean_spending <- mean(spending)
# What was the dollar amount of the largest grant?
highest_amount <- max(spending)
# What was the dollar amount of the smallest grant?
lowest_amount <- min(spending)
# Which organization received the largest grant?
largest_recipient <- org[spending == largest_amount]
# Which organization received the smallest grant?
smallest_recipient <- org[spending == lowest_amount]
#### Section 2 ####
largest_recipient <- org[spending == highest_amount]
largest_recipient
plot(spending)
spending
hist(spending)
plot(log(spending)
)
plot(log(spending))
spending
gates_data <- read.csv('data/gates_money.csv')
gates_data$total_amount
View(gates_data)
length(grants[grants$year == 2010])
#### Section 1 ####
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read data into a variable called "grants" using the "read.csv" function
grants <- read.csv('data/gates_money.csv')
# Use the View function to look at your data
View(grants)
# Create a variable "spending" as the "total_amount" column of the dataset
spending <- grants$total_amount
# Confirm that your "spending" variable is a vector using the "is.vector" function
is.vector(spending)
# Create a variable "org" as the "organization" column of the dataset
org <- as.vector(grants$organization)
### Now you can ask some more interesting questions about the dataset.  Store your answers in variables ###
# What was the mean grant value?
mean_spending <- mean(spending)
# What was the dollar amount of the largest grant?
highest_amount <- max(spending)
# What was the dollar amount of the smallest grant?
lowest_amount <- min(spending)
# Which organization received the largest grant?
largest_recipient <- org[spending == highest_amount]
# Which organization received the smallest grant?
smallest_recipient <- org[spending == lowest_amount]
# How many grants were awarded in 2010?
length(grants[grants$year == 2010])
length(grants[grants$start_year == 2010])
length(spending[grants$start_year == 2010])
length(spending[grants$start_year == 2009])
length(spending[grants$start_year == 2008])
org
?lapply
?count
?duplicated
as.data.frame(lowest_amount, highest_amount)
as.data.frame(c(lowest_amount, highest_amount)
)
as.data.frame(lowest_amount, highest_amount)
as.data.frame.vector(lowest_amount, highess)
as.data.frame.vector(lowest_amount, highest_amount)
as.data.frame.vector(lowest_amount, highest_amount, largest_recipient)
View(bnames)
library(reportsWS)
View(bnames)
write.csv(bnames, 'baby_names.csv')
max(bnames$year)
bnames[bnames$year == 2013]
### Exercise 2 ###
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read in your baby names csv file into a variable called "bnames"
bnames <- read.csv('baby_names.csv')
# Create a vector "year" as the year column of the dataset
year <- bnames$year
# Create a vector "names" as the name column of your dataset
# As in the last exercise, you'll need to convert this column to a vector
names <- as.vector(bnames$name)
year[proportions == max(proportions[name == "Michael"])]
year <- bnames$year
# Create a vector "name" as the name column of your dataset
# As in the last exercise, you'll need to convert this column to a vector
name <- as.vector(bnames$name)
# Create a vector "proportion" as the prop column of the datset
proportion <- bnames$prop
### Answer the following questions about your dataset ###
# In which year was your name most popular?
year[proportions == max(proportion[name == "Michael"])]
year[proportion == max(proportion[name == "Michael"])]
proportion[name == 'Michael' && year == '2013']
name == 'Michael' && year == '2013'
name
name == 'Michael'
name <- as.vector(bnames$name[bnames$year == 2013])
names(bnames)
name <- as.vector(bnames$name[bnames$year == 2013 && bnames$sex == 'M'])
name
bnames$sex
bnames$year == 2013 && bnames$sex == 'M'
bnames[,bnames$sex=='F']
bnames[bnames$sex=='F',]
bnames[bnames$sex=='F',c('name', 'prop', 'year')],
bnames[bnames$sex=='F',c('name', 'prop', 'year')]
View(bnames[bnames$sex=='F',c('name', 'prop', 'year')])
write.csv(bnames[bnames$sex=='F',c('name', 'prop', 'year')], 'female_names.csv')
write.csv(bnames[bnames$sex=='M',c('name', 'prop', 'year')], 'male_names.csv')
female_names <- read.csv('female_names.csv')
female_names <- read.csv('data/female_names.csv')
year <- bnames$year
# Create a vector "name" as the name column of the datset
name <- female_names$name
# Create a vector "prop" as the proportion column of the dataset
prop <- female_names$prop
# As in the last exercise, you'll need to convert this column to a vector
name <- as.vector(female_names$name)
# Create a vector "prop" as the proportion column of the dataset
prop <- female_names$prop
# Create a vector "names_2013" as the name column of your dataset where the year is 2013
names_2013 <- name[year == 2013]
# Create a vector "prop_2013" as the prop column of the datset in 2013
proportion_2013 <- prop[year==2013]
most_pop <- names_2013[proportion_2013 == max(proportion_2013)]
most_pop
proportion_2013 == max(proportion_2013)
prop <- female_names$prop
prop
year
prop[year == 2013]
year == 2013
prop[year == 2013]
is.vector(year)
is.vector(prop)
length(year)
length(prop)
year <- female_names$year
prop <- female_names$prop
names_2013 <- name[year == 2013]
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read in the female baby names csv file into a variable called "female_names"
female_names <- read.csv('data/female_names.csv')
nrow(female_names)
min(female_names$year)
fnames <- female_names[female_names$year > 1960,]
write.csv(fnames, file='data/female_names.csv')
female_names <- read.csv('data/female_names.csv')
nrows(female_names)
nrow(female_names)
year <- female_names$year
name <- as.vector(female_names$name)
name
prop <- female_names$prop
names_2013 <- name[year == 2013]
proportion_2013 <- prop[year==2013]
most_pop <- names_2013[proportion_2013 == max(proportion_2013)]
most_pop
male_names <- read.csv('data/male_names.csv')
min(female_names$year)
mnames <- male_names[male_names$year>1960]
mnames <- male_names[male_names$year>1960,]
write.csv(mnames, 'data/males_names.csv')
male_names <- read.csv('data/male_names.csv')
# Create a vector "year" as the year column of the dataset
year <- female_names$year
# Create a vector "name" as the name column of the datset
# As in the last exercise, you'll need to convert this column to a vector
name <- as.vector(female_names$name)
# Create a vector "prop" as the proportion column of the dataset
prop <- female_names$prop
# Create a vector "names_2013" as the name column of your dataset where the year is 2013
names_2013 <- name[year == 2013]
# Create a vector "prop_2013" as the prop column of the datset in 2013
proportion_2013 <- prop[year==2013]
# What was the most popular female name in 2013?
most_pop <- names_2013[proportion_2013 == max(proportion_2013)]
# Write a funciton "most_popular" that takes in a year, and returns
# a sentence stating the most popular name in that year
most_popular <- function(year) {
most_pop <- name[prop == max(prop[year == year])]
return(paste('The most popular baby name in', year, 'was', most_pop))
}
most_pop_1994 <- most_popular(1994)
most_pop_1994
most_pop_1994 <- most_popular(c(1994, 1995))
most_pop_1994
most_pop_each_year <- most_popular(1961:2013)
most_pop_each_year
most_pop_each_year <- most_popular(1961)
most_pop_each_year
most_popular <- function(my_year) {
year_tmp <- yaer[year == my_year]
names_tmp <- name[year == my_year]
prop_tmp <- prop[year==my_year]
most_pop <- names_tmp[prop_tmp == max(prop_tmp[year_tmp == year])]
return(paste('The most popular baby name in', year, 'was', most_pop))
}
# What was the most popular female name in 1994?
most_pop_1994 <- most_popular(1994)
# What happens if you pass a vector of all years into your function?
most_pop_each_year <- most_popular(1961:2013)
most_popular <- function(my_year) {
year_tmp <- year[year == my_year]
names_tmp <- name[year == my_year]
prop_tmp <- prop[year==my_year]
most_pop <- names_tmp[prop_tmp == max(prop_tmp[year_tmp == year])]
return(paste('The most popular baby name in', year, 'was', most_pop))
}
# What was the most popular female name
most_pop_each_year <- most_popular(1961:2013)
most_popular <- function(my_year) {
year_tmp <- year[year == my_year]
names_tmp <- name[year == my_year]
prop_tmp <- prop[year==my_year]
most_pop <- names_tmp[prop_tmp == max(prop_tmp[year_tmp == my_year])]
return(paste('The most popular baby name in', my_year, 'was', most_pop))
}
# What was the most popular female name in 1994?
most_pop_1994 <- most_popular(1994)
# What happens if you pass a vector of all years into your function?
most_pop_each_year <- most_popular(1961:2013)
most_pop_1994 <- most_popular(1994)
most_pop_1994
my_year <- 1961:2013
my_year
year_tmp <- year[year == my_year]
year
year[year == my_year]
most_pop(1990)
most_popular(1990)
most_popular(1995)
most_popular(2001)
most_popular(2013)
most_popular(1961)
how_popular <- function(my_name, my_year) {
popular <- prop[name == my_name && year == my_year]
return(paste('The proportion of people named', my_name, 'in', my_year, 'was', popular))
}
how_popular('Laura', 1995)
my_name <- 'Laura'
my_year <- 1995
popular <- prop[name == my_name && year == my_year]
popular
prop
how_popular <- function(my_name, my_year) {
names_tmp <- name[year == my_year]
prop_tmp <- prop[year==my_year]
popular <- prop_tmp[names_tmp == my_name]
return(paste('The proportion of people named', my_name, 'in', my_year, 'was', popular))
}
how_popular('Laura', 1995)
how_popular <- function(my_name, my_year) {
names_tmp <- name[year == my_year]
prop_tmp <- prop[year==my_year]
popular <- round(prop_tmp[names_tmp == my_name], 2)*100
return(paste('The proportion of people named', my_name, 'in', my_year, 'was', popular))
}
# How popular was the name 'Laura' in 1995
how_popular('Laura', 1995)
how_popular <- function(my_name, my_year) {
names_tmp <- name[year == my_year]
prop_tmp <- prop[year==my_year]
popular <- round(prop_tmp[names_tmp == my_name], 4)*100
return(paste('The proportion of people named', my_name, 'in', my_year, 'was', popular))
}
# How popular was the name 'Laura' in 1995
how_popular('Laura', 1995)
how_popular <- function(my_name, my_year) {
names_tmp <- name[year == my_year]
prop_tmp <- prop[year==my_year]
popular <- round(prop_tmp[names_tmp == my_name], 4)*100
return(paste('The proportion of people named', my_name, 'in', my_year, 'was', popular))
}
# How popular was the name 'Laura' in 1995
how_popular('Sophia', 2013)
datasets()
datasets
data()
data('LakeHuron')
LakeHuron
data("Seatbelts")
Seatbelts
data("Seatbelts")
Seatbelts
?Seatbelts
?UkDriverDeaths
data("UKDriverDeaths")
?UKDriverDeaths
data()
data(swiss)
View(swiss)
data('women')
View(women)
data(sleep)
View(sleep)
data(presidents)
View(presidents)
data(mtcars)
View(mtcara)
View(mtcars)
data(mdeaths)
data("mdeaths")
data(lynx)
View(lynx)
data('UKLungDeaths')
View(UKLungDeaths)
data(cars)
View(cars)
data(airquality)
View(airquality)
data("USPersonalExpenditure")
View(USPersonalExpenditure)
View(USPersonalExpenditure$1940)
names(USPersonalExpenditure)
class(USPersonalExpenditure)
data('UCBAdmissions')
View(UCBAdmissions)
data("Titanic")
View(Titanic)
data('HairEyeColor')
View(HairEyeColor)
?HairEyeColor
names(HairEyeColor)
class(HairEyeColor)
HairEyeColor$eye
as.data.frame(HairEyeColor)
as.data.frame(HairEyeColor)$eye
as.data.frame(HairEyeColor)$Eye
students <- as.data.frame(HairEyeColor)
names(students)
names(students$Freq) <- 'frequency'
students
col.names(students$Freq) <- 'frequency'
colnames(students$Freq) <- 'frequency'
names(students)
colnames(students) <- tolower(colnames(students))
students
write.csv(students, file="students.csv")
colors <- unique(students$eye)
colors
colors <- as.character(unique(students$eye))
colors
hair_colors <- as.character(unique(students$hair))
hair_colors
